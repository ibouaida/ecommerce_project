version: '3.9'

services:
  # Service Backend Django
  backend:
    build: 
      context: .
      dockerfile: backend/Dockerfile
    container_name: ecommerce_backend
    
    restart: unless-stopped
    environment:
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=ecommerce.settings
      - SECRET_KEY=your-secret-key-here
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0,*
      - CORS_ALLOWED_ORIGINS=http://localhost:3001,http://frontend:80,http://localhost:3000
      - CORS_ALLOW_ALL_ORIGINS=True
    volumes:
      - .:/app
      - media_files:/app/media
    ports:
      - "8000:8000"
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Frontend React
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - NODE_ENV=production
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse Proxy Nginx
  nginx:
    image: nginx:alpine
    container_name: ecommerce_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - ecommerce_network

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service de monitoring (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ecommerce_network

  # Service de logs (optionnel)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ecommerce_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ecommerce_network

volumes:
  redis_data:
    driver: local
  media_files:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  ecommerce_network:
    driver: bridge
